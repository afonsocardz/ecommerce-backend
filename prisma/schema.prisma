// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  CartProducts CartProduct[]
  Order        Order[]

  @@map("users")
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  price        Float
  description  String
  imageUrl     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  CartProduct  CartProduct[]
  OrderProduct OrderProduct[]

  @@map("products")
}

model CartProduct {
  id        Int     @id @default(autoincrement())
  quantity  Int     @default(1)
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@unique([productId, userId])
  @@map("cart_products")
}

enum OrderStatus {
  PENDING
  CANCELLED
  DELIVERY
  PAYED
  COMPLETED
}

model Order {
  id          Int         @id @default(autoincrement())
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())

  User   User @relation(fields: [userId], references: [id])
  userId Int

  OrderProduct OrderProduct[]
  Payment      Payment[]

  @@map("orders")
}

model OrderProduct {
  id       Int   @id @default(autoincrement())
  quantity Int
  subtotal Float

  Order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  Product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@map("order_products")
}

enum PaymentStatus {
  FAILED
  SUCCESSFUL
}

model Payment {
  id        Int           @id @default(autoincrement())
  status    PaymentStatus
  createdAt DateTime      @default(now())

  Order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  @@map("payments")
}
